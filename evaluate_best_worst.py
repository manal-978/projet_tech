# -*- coding: utf-8 -*-
"""evaluate_best_worst.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qAkLWkj7bHBxzM0GfjNm7ST82ZvOaJz2

# **La fonction evaluate score**
"""

#Score est nombre de clauses non satisfaites
def evaluate_score(solution, clauses):
    # Initialiser le score à 0
    score = 0
    # Parcourir chaque clause de la liste
    for clause in clauses: 
        clause_satisfied = False
        for i in clause:
            if i > 0: # proposition true
                if solution[i - 1] == 1: 
                    clause_satisfied = True
                    break
            elif i < 0: # proposition false
                if solution[-i - 1] == 0:
                    clause_satisfied = True
                    break
        #nombre de clauses non satisfaites (on minimise le score)
        if not clause_satisfied:
            score += 1
    return score

"""# **La fonction One flip**"""

def one_flip(solution, index):
    new_solution = solution.copy()
    new_solution[index] = 1 - new_solution[index]
    return new_solution

"""# **Exemple pour la fonction one flip**"""

# Solution possible 
solution = [1, 0, 0]
# Propositions (valeurs selon leur positions (i+1) dans le vecteur solution)
A = 1
B = 2
C = 3
# Liste de clauses
clauses = [[A,B], [-A,-B], [A,-C], [-A,C]]

# Evalue le score de la solution initiale
score = evaluate_score(solution, clauses)
print(f"Score de la solution initiale : {score}")

# Génère un voisin de la solution par 1-flip
new_solution = one_flip(solution, 1)
print(f"Nouvelle solution : {new_solution}")

# Evalue le score du nouveau voisin
new_score = evaluate_score(new_solution, clauses)
print(f"Score du nouveau voisin : {new_score}")

"""# **Le premier ameliorant**"""

#premier ameliorant(first f)
sol1 = [1, 0, 0]
A = 1
B = 2
C = 3
clauses = [[A,B], [-A,-B], [A,-C], [-A,C]]
score = evaluate_score(sol1, clauses)
#print(score)
liste = {score : sol1}
#print(liste)
def firstf(solution):
  for x in range(len(sol1)):
    new_solution = one_flip(solution, x)
    new_score = evaluate_score(new_solution, clauses)
    if new_score < score:
      return new_solution
  
res = firstf(sol1)
print(f"Le premier ameliorant : {res}")

"""# **Le meilleur améliorant**"""

#meilleur ameliorant(best b)
def bestb(solution,score):
  for x in range(len(sol1)):
    new_solution = one_flip(solution, x)
    new_score = evaluate_score(new_solution, clauses)
    if new_score < score:
      score = new_score
      bestsol=new_solution
  return bestsol
res1 = bestb(sol1,score)

print(f"Le meilleur ameliorant : {res1}")
#print(liste)